assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
}rm(deck)
rm(deck)
deal
deal()
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
library(readr)
deck <- read_csv("deck.csv")
View(deck)
deal()
deal()
shuffle()
#JOnathan Part 2 Hands-on
#EXERCISE 5.2 (Vector of Cards)
hand <- c("ace", "king", "queen", "jack", "ten")
hand
typeof(hand)
#Exercise 5.3 (Make a Matrix)
hand1 <- c("ace", "king", "queen", "jack", "ten", "spades", "spades",
"spades", "spades", "spades")
matrix(hand1, nrow = 5)
matrix(hand1, ncol = 2)
dim(hand1) <- c(5, 2)
#Exercise 5.4 (Write a Card)
#Make a virtual playing card by combining “ace,” “heart,” and 1 into a vector. What type of atomic vector will result? Check if you are right.
card <- c("ace", "hearts", 1)
card
#Exercise 5.5 (Use a List to Make a Card)
card <- list("ace", "hearts", 1)
card
#Exercise 6.1 (Deal a Card)/
deal <- function(cards) {
cards[1, ]
}
#Exercise 6.2 (Shuffle a Deck)
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
cards2 <- shuffle(cards)
deal(cards2)
cards3 <- cards
#Exercise 7.1 (How many Aces?)
cards3$face
cards3$face == "ace"
sum(cards3$face == "ace")
cards3$value[cards3$face == "ace"]
cards3$value[cards3$face == "ace"] <- 14
#Exercise 7.2 (Score the Deck for Hearts)
cards4 <- cards
cards4$value <- 0
cards4$suit == "hearts"
cards4$value[cards4$suit == "hearts"] <- 1
queenOfSpades <- cards4$face == "queen" & cards4$suit == "spades"
cards4$value[queenOfSpades] <- 13
#Exercise 7.3 (Practice with Tests)
w <- c(-1, 0, 1)
x <- c(5, 15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
#solutions
w > 0
10 < x & x < 20
y == "Febuary"
all(z %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday", "Sunday"))
cards5 <- cards
head(cards5, 13)
facecard <- cards5$face %in% c("king", "queen", "jack")
cards5$value[facecard] <- 10
cards5$value[cards5$face == "ace"] <- NA
#Exercise 8.1 (Will deal work?)
deal <- function() {
cards[ 1 , ]
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
#Exercise 8.3 (Rewrite shuffle)
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
#Separate Run time environment
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
shuffle()
deal
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal
deal
deal
deal
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
rm(deck)
deal
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
rm(deck)
View(hand1)
library(readr)
deck <- read_csv("deck.csv")
View(deck)
rm(deck)
deal
deal()
deal()
rm(deck)
rm(deck)
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deck <- read.csv("C:/Users/jji23/OneDrive/Desktop/R 661/Jimenez_Jonathan_661/Hands-on Programming/Part 2 Deck/deck.csv")
View(deck)
deal()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal()
deal()
shuffle()
deal()
deal()
deal()
deal()
deal()
facecard <- pokemon_scores_tidy$StaDefinions %in% c("Total")
pokemon_scores_tidy
pokemon_scores_tidy
library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)
library(here)
library(nycflights13)
library(fivethirtyeight)
#Importing Data
library(readr)
pokemon_scores <- read_csv(here("Assignments","Importing and Tidy","pokemon.csv"))
pokemon_scores
#Bringing the Wrangling Together
pokemon_filtering <- pokemon_scores %>%
filter(Name %in% c("Beedrill","Pidgey","Rufflet","Litleo"))%>%
select(-Defence) %>%
rename("12" = HP)
pokemon_filtering
#Tidying Data
pokemon_scores_tidy <- pokemon_filtering %>%
pivot_longer(names_to = "StatDefinitions", values_to = "Values", cols = -Name, names_transform = list(year = as.integer))
facecard <- pokemon_scores_tidy$StaDefinions %in% c("Total")
cards5$value[facecard] <- 10
pokemon_scores_tidy
ggplot(mapping=aes(x=seq_along(pokemon_scores_tidy$StatDefinitions), y=pokemon_scores_tidy$Values)) +
geom_point()
facecard <- pokemon_scores_tidy$StaDefinions %in% c("Total")
facecard <- pokemon_scores_tidy$StatDefinions %in% c("Total")
facecard <- pokemon_scores_tidy$StatDefintions %in% c("Total")
facecard <- pokemon_scores_tidy$StatDefintions %in% c("Total")
pokemon_scores_tidy
facecard <- pokemon_scores_tidy$StatDefinitions %in% c("Total")
pokemon_scores_tidy[facecard] <- 1
facecard <- pokemon_scores_tidy$StatDefinitions %in% c("Total")
pokemon_scores_tidy[facecard] <- 1
poke <- pokemon_scores_tidy$StatDefinitions %in% c("Total")
pokemon_scores_tidy[poke] <- 1
poke <- pokemon_scores_tidy$StatDefinitions %in% c("Total")
pokemon_scores_tidy[poke] <- 1
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = 1
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = 1
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = 1
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = 1
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = 4
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = "l"
pokemon_scores_tidy
pivot_longer(names_to = "StatDefinitions", values_to = "Values", cols = -Name, names_transform = list(year = as.integer))
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = "l"
pokemon_scores_tidy[pokemon_scores_tidy$StatDefinitions] = "l"
pokemon_scores_tidy
pokemon_scores_tidy <- pokemon_filtering %>%
pivot_longer(names_to = "StatDefinitions", values_to = "Values", cols = -Name, names_transform = list(year = as.integer))
pokemon_scores_tidy
pokemon_scores_tidy[Values] = 1
pokemon_scores_tidy[Values] = 1
pokemon_scores_tidy[pokemon_scores_tidy$Values] = 1
pokemon_scores_tidy[pokemon_scores_tidy$Name] = 1
pokemon_scores_tidy
pokemon_scores_tidy[pokemon_scores_tidy$Beedrill] = 1
poke <- pokemon_scores_tidy$StatDefinitions %in% c("Total", "Attack")
poke
